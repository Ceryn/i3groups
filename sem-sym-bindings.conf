#       ____                    ______
#      / ___|  ___ _ __ ___    / / ___| _   _ _ __ ___
#      \___ \ / _ \ '_ ` _ \  / /\___ \| | | | '_ ` _ \
#       ___) |  __/ | | | | |/ /  ___) | |_| | | | | | |
#      |____/ \___|_| |_| |_/_/  |____/ \__, |_| |_| |_|
#                                       |___/
#            ____  _           _ _
#           | __ )(_)_ __   __| (_)_ __   __ _ ___
#           |  _ \| | '_ \ / _` | | '_ \ / _` / __|
#           | |_) | | | | | (_| | | | | | (_| \__ \
#           |____/|_|_| |_|\__,_|_|_| |_|\__, |___/
#                                        |___/
# Semantic bindings that are
# Also symmetrical with tmux+vim to leverage your investment
# in muscle memory. A suggestion/Proposal that can benefit
# tools that take up a lot of bindings in i3
# Hector Lecuanda (H-Lo) https://github.com/hlecuanda
#
# these are the bread and butter most frequent navigation, 
# do not group them on a binding mode, for quick access
# anything you do often gets to be on level 1- on par with 
# the tmux-like "prefix" $mod+a
#
# the omnipotent "prefix key" that unleashes all other modes
# just like in tmux (or screen? anyone still uses screen?):
bindsym $mod+a
# you could skip the "command" level, but bindings won't be
# symmetrical with tmux. but then, again binding modes free
# up a lot keys so we can have both:
bindsym $mod+f mode focus
bindsym $mod+g mode groups
bindsym $mod+o mode outputs
bindsym $mod+s mode assign
bindsym $mod+equals mode assign
# Again, i'd rather leave the "bare" $mode+{x} bindings for 
# stuff i do frequently and everywhere like
bindsym $mod+v exec "xclip -o"
# i suggest using hjkl as in vim, instead of jkl; but 
# that's just me. My OCD finds it appealing to use the 
# same pattern for motion, while only changing the trigger
# key to make a difference between environments:
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right
# 'h' always means left and 'H' means BIGGER LEFT
# CTRL-w is the prefix for vim, h= move cursor left; H= focus window left
# CTRL-a is my prefix for tmux, h=focus pane left; H=focus window left (pane group)
# Mod4-a is my prefix for i3, h=focus container to the left, H=focus output to the left.
bindsym $mod+$shift+h focus output left
bindsym $mod+$shift+j focus output down
bindsym $mod+$shift+k focus output up
bindsym $mod+$shift+l focus output right
# or you could vary your mod-key to avoid half-a-vulcan nerve pinch:
# usng ctrl+h vs $mode+ctrl+h .as long as the meanings of hjkl are always consisten
# if there are no collisions, you may even keep both. I do, since my first level
# is barely populated, most command live on their binding modes.
bindsym $ctrl+h focus output left
bindsym $ctrl+j focus output down
bindsym $ctrl+k focus output up
bindsym $ctrl+l focus output right

# added Tab and shift-tab for good measure, old windows habits die hard
bindsym $mod+Tab focus next
bindsym $mod+$shift_Tab focus prev

# first level, "command floor, only bare bindings to level-2 modes:"
mode command {
    set $ROFI "rofi -dmenu"
    bindsym c exec "i3-msg workspace $(i3-msg -t get_workspaces | jq 'map(.num) | . + [0] | sort | . - [-1] | map(.+1) - . | .[0]')"
    # a much more accessible create workspace at prefix c ($mod+a c)
    bindsym f mode focus
    bindsym g mode groups
    bindsym o mode outputs
    bindsym s mode assign
    # use s or =, whatever resonates mnemonically to you. Im just adding this comment
    # because the equals line screws up the alignment of the previous lines (damn OCD)
    bindsym equals mode assign
    # you can add some frequently used commands here, so you avoid colissions
    # on the formerly overcrowded first and only level
    bindsym r       reload  , mode default
    bindsym $ctrl+r restart , mode default
    # kinda like hitting : on vim gets you to a command prompt, here it gets you rofi
    bindsym colon   exec $ROFI, mode default
    # # # You need a way to get back to ground level if you chanted your mind before
    # executing any command. Escape and Return ALWAYS send you to the ground floor
    # no matter how many levels of bindng modes you've climbed.
    bindsym Escape  mode default
    bindsym Return  mode default
    # I wasn't kidding about OCD n.n
}

mode focus {
    # these shoud go on the floor level, because having them here ADDS a keystroke to 
    # the most frequent operation. i add them here for thoroughness and to explain 
    # when to use or avoid chaining to mode default:
    bindsym h focus left
    bindsym j focus down
    bindsym k focus up
    bindsym l focus right
    # so, you focus left by doing $mod+a then just f (no modifer) then h (no modifier)
    # notice you release $mode+a BEFORE hitting f. muscle memory will tingle with pre-
    # conditioning from tmux and vim. so, focus left is $mod+a f h   (prefix-focus-left)
    # focus up is $mod+a f u (prefix-focus-up)
    bindsym $mod+h focus output left,  mode default
    bindsym $mod+j focus output down,  mode default
    bindsym $mod+k focus output up,    mode default
    bindsym $mod+l focus output right, mode default
    # OUTPUT gets focused by $mod+a f $mod-h (your finger is already over $mod so you might as well)
    # plus there is a strong mnemonic for the direction keys (hjkl) and making a "bigger" motion 
    # like bare h vs $mod+h our brain weighs moving from windows within outoputs as lightweight
    # vs moving between outputs as heavyweight, therefore the key should be the same, but "heavier", 
    # hence the $mod+h. 
    #
    # Since you will often need to navigate focus trough more than just 2 windows, we dont
    # focus-right to mode-default so we cand do something like $mod+a f l l l to focus 3 containers
    # to the right instead of the cumbersome $mod+a f l $mod+a f l $mod+a f l
    # since we seldom jump focus 3 or more times between outputs, mode default is chained
    # immediatly afgter focus output {motion} so we get kicked back to mode default, or ground level 

    bindsym Escape  mode default
    bindsym Return  mode default
    # after focusing repeatedly in any drection , we shoul press escape or return to get back 
    # to ground level (focus should REALLY live at ground level)
}

#less frequent changes get their own mode:
mode outputs {
    bindsym h move workspace to output left, mode default
    bindsym l move workspace to output right, mode default
    bindsym w move workspace back_and_forth, mode default
    # or uncomment, hell, use both, there is no conllision =)
    # bindsym j         move workspace to output left
    # bindsym semicolon move workspace to output right
    bindsym Escape  mode default
    bindsym Return  mode default
    # the sequence here is prefix o h for output left. or $mod+a o h 
    # prefix o k for move to output right, etc, kicks you back to ground level
}

# bind "n" to reName, insstead of something more contrives
# as bindngs are isolated in the group, there are no collissions
# in case you have r bound to Reload on level 1, for example
mode groups {
    bindsym a  exec i3groups assign_group,     mode default
    bindsym f  exec i3groups focus_group,      mode default
    bindsym k  exec i3groups prev_workspace,   mode default
    bindsym l  exec i3groups next_workspace,   mode default
    bindsym n  exec i3groups rename_group,     mode default
    bindsym r  exec i3groups rename_workspace, mode default
    # prefix g a = assign group
    # prefix g f = focus group
    # prefix g k = next_workspace (i'd reccomend using Tab, or both)
    # prefix g n = rename
    # isnt this way nicer than a 3 finger vulcan nerve pinch? remember always release after prefix

    bindsym $shift+Tab  exec i3groups next_workspace, mode default
    bindsym Tab         exec i3groups prev_workspace, mode default

    bindsym 1  exec i3groups focus_group  1, mode default
    bindsym 2  exec i3groups focus_group  2, mode default
    bindsym 3  exec i3groups focus_group  3, mode default
    bindsym 4  exec i3groups focus_group  4, mode default
    bindsym 5  exec i3groups focus_group  5, mode default
    bindsym 6  exec i3groups focus_group  6, mode default
    bindsym 7  exec i3groups focus_group  7, mode default
    bindsym 8  exec i3groups focus_group  8, mode default
    bindsym 9  exec i3groups focus_group  9, mode default
    bindsym 10 exec i3groups focus_group 10, mode default
    #prefix g 1 ... you know =)

    bindsym Escape  mode default
    bindsym Return  mode default
}

# this is where binding modes relly shine!. you have a simple, consistent stroke with
# a related but not identical semantic meaning, on the same keystrokes (numbers)
# the difference is how you got there. using the <a> shortucut or the <g> shortcut
# changes the meanng of the same keys.  
#
# Noq you don't have to vulcan-nerve-pinch your keyboard to get assign by
# doing $mod+$ctrl+$shift+1 ! again, no collisions because t is a different
# binding mode
mode assign {
    bindsym 1  exec i3groups assign_group  1, mode default
    bindsym 2  exec i3groups assign_group  2, mode default
    bindsym 3  exec i3groups assign_group  3, mode default
    bindsym 4  exec i3groups assign_group  4, mode default
    bindsym 5  exec i3groups assign_group  5, mode default
    bindsym 6  exec i3groups assign_group  6, mode default
    bindsym 7  exec i3groups assign_group  7, mode default
    bindsym 8  exec i3groups assign_group  8, mode default
    bindsym 9  exec i3groups assign_group  9, mode default
    bindsym 10 exec i3groups assign_group 10, mode default
    # prefix s 1
    # prefix s 2
    ...
    bindsym Escape  mode default
    bindsym Return  mode default
}

### WORKSPACES #################################################
# Create new workspace with the next available number. Thanks to nervengift.

#  vim: set ft=i3 sw=4 tw=0 fdm=manual et :
